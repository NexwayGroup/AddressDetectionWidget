// Generated by CoffeeScript 1.8.0
(function() {
  var AddressDetectionWidget, PagesManager, Plugin,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Plugin = (function() {
    var defaultOptions;

    defaultOptions = {
      debug: false,
      messageScope: 'warning'
    };

    function Plugin(element, options, instanceName) {
      this.element = element;
      this.options = $.extend({}, defaultOptions, options);
      this.instanceName = instanceName;
      this.defaults = defaultOptions;
    }

    Plugin.prototype.log = function(msg, type) {
      var msgColor, prefix, show, titleColor;
      if (type == null) {
        type = 'info';
      }
      if (this.options.debug === true) {
        prefix = '';
        show = true;
        if (this.options.messageScope === 'error' && type === 'info') {
          show = false;
        }
        if (this.options.messageScope === 'error' && type === 'warning') {
          show = false;
        }
        if (this.options.messageScope === 'warning' && type === 'info') {
          show = false;
        }
        if (type === 'info') {
          titleColor = 'background: white; color: grey';
          msgColor = 'background: white; color: green';
        }
        if (type === 'error') {
          titleColor = 'background: red; color: white';
          msgColor = 'background: white; color: red';
          prefix = '(Error!)';
        }
        if (type === 'warning') {
          titleColor = 'background: white; color: orange';
          msgColor = 'background: white; color: orange';
          prefix = '(Warning)';
        }
        if (show) {
          console.log("%c " + this.instanceName + ": " + prefix + " %c " + msg, titleColor, msgColor);
        }
      }
    };

    Plugin.prototype.getPluginByInstanceName = function(domElement, instName, numeric, callback) {
      if (numeric == null) {
        numeric = -1;
      }
      return $.data(domElement, instName);
    };

    Plugin.prototype.runForEachInstance = function(selector, callback) {
      var i, iName;
      i = 0;
      iName = this.pluginName;
      $(selector).each(function() {
        i = i + 1;
        if ($.data(this, iName + '_' + i) != null) {
          return callback($.data(this, iName + '_' + i));
        } else if ($.data(this, iName + '_#' + $(this).attr('id')) != null) {
          return callback($.data(this, iName + '_#' + $(this).attr('id')));
        }
      });
    };

    return Plugin;

  })();

  PagesManager = (function() {
    function PagesManager(base) {
      this.base = base;
      return;
    }

    PagesManager.prototype._closeCurrentPage = function() {
      this.base._currentElement.children().remove();
    };

    PagesManager.prototype.start = function() {
      var step_start_html;
      step_start_html = "<div class=\"step-start alert alert-info\" >\n  <button type=\"button\" class=\"close\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n  <h4>" + this.base.options.texts.start.title + "</h4>\n  <p>" + this.base.options.texts.start.content + "</p>\n  <button type=\"button\" class=\"detectBtn btn btn-primary btn-xs\">" + this.base.options.texts.start.detectBtn + "</button>\n  <button type=\"button\" class=\"cancelBtn btn btn-link\">" + this.base.options.texts.cancelBtn + "</button>\n</div>";
      this._closeCurrentPage();
      this.base._currentElement.html(step_start_html);
      this.base._currentElement.find('.detectBtn').on('click', (function(_this) {
        return function(e) {
          _this.base.detect();
        };
      })(this));
      this.base._currentElement.find('.cancelBtn').on('click', (function(_this) {
        return function(e) {
          _this._closeCurrentPage();
        };
      })(this));
      this.base._currentElement.find('.close').on('click', (function(_this) {
        return function(e) {
          _this._closeCurrentPage();
        };
      })(this));
      this.base.log('Render start page');
    };

    PagesManager.prototype.success = function() {
      var step_success_html;
      step_success_html = "<div class=\"step-success alert alert-info\">\n  <button type=\"button\" class=\"close\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n  <h4>" + this.base.options.texts.success.title + "</h4>\n  <p>" + this.base.options.texts.success.content + "</p>\n    <address>\n      " + this.base.addressData.streetName + " " + this.base.addressData.streetNumber + ", " + this.base.addressData.postalCode + " " + this.base.addressData.city + ", " + this.base.addressData.country + "\n    </address>\n  <button type=\"button\" class=\"fillBtn btn btn-primary btn-xs\">" + this.base.options.texts.success.fillBtn + "</button>\n</div>";
      this._closeCurrentPage();
      this.base._currentElement.html(step_success_html);
      this.base._currentElement.find('.fillBtn').on('click', (function(_this) {
        return function(e) {
          _this.base.fillForm();
        };
      })(this));
      this.base._currentElement.find('.close').on('click', (function(_this) {
        return function(e) {
          _this._closeCurrentPage();
        };
      })(this));
      this.base.log('Render success page');
    };

    PagesManager.prototype.error = function(title, content, showTryBtn) {
      var step_error_html;
      if (showTryBtn == null) {
        showTryBtn = true;
      }
      step_error_html = "<div class=\"step-error alert alert-danger\">\n  <button type=\"button\" class=\"close\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n  <h4>" + title + "</h4>\n  <p>" + content + "</p>\n  <button type=\"button\" class=\"tryBtn btn btn-primary btn-xs\">" + this.base.options.texts.tryAgainBtn + "</button>\n</div>";
      this._closeCurrentPage();
      this.base._currentElement.html(step_error_html);
      if (showTryBtn === false) {
        this.base._currentElement.find('.tryBtn').remove();
      }
      this.base._currentElement.find('.tryBtn').on('click', (function(_this) {
        return function(e) {
          _this.base.detect();
        };
      })(this));
      this.base._currentElement.find('.close').on('click', (function(_this) {
        return function(e) {
          _this._closeCurrentPage();
        };
      })(this));
      this.base.log('Render error page');
    };

    PagesManager.prototype.loading = function() {
      var step_loading_html;
      step_loading_html = "<div class=\"step-loading alert alert-info\">\n  <h4>" + this.base.options.texts.loading.title + "</h4>\n  <p>" + this.base.options.texts.loading.content + "</p>\n</div>";
      this._closeCurrentPage();
      this.base._currentElement.html(step_loading_html);
      this.base.log('Render loading page');
    };

    return PagesManager;

  })();

  AddressDetectionWidget = (function(_super) {
    var defaultOptions;

    __extends(AddressDetectionWidget, _super);

    defaultOptions = {
      formId: '',
      addressId: '#street',
      cityId: '#city',
      postalId: '#zip',
      postalFirstId: '#zip-first',
      postalSecondId: '#zip-second',
      countryId: '#country',
      texts: {
        cancelBtn: 'cancel',
        tryAgainBtn: 'Try again',
        start: {
          title: 'Location Detection',
          content: 'We can detect your address to simplify form filling. Just press the button below.',
          detectBtn: 'Detect location'
        },
        success: {
          title: 'Is this your address?',
          content: 'We think that this is your adress. If it is correct click "Fill form" button below.',
          fillBtn: 'Fill form'
        },
        error: {
          title: 'Ups...',
          geocoderFailed: 'We cannot retrieve your location information right now :(',
          unsupportedBrowser: 'Geolocation is not supported by this browser. Please try to use latest IE, Chrome, Firefox, Opera or Safari browser.'
        },
        loading: {
          title: 'Please wait...',
          content: 'We are detecting your current location'
        }
      }
    };

    function AddressDetectionWidget(element, options, instanceName, pluginName) {
      this.pluginName = pluginName;
      this._getAddress = __bind(this._getAddress, this);
      options = $.extend({}, defaultOptions, options);
      AddressDetectionWidget.__super__.constructor.call(this, element, options, instanceName);
      if (options.formId === '') {
        this.log('There is no formId value', 'error');
        return;
      }
      if ($(this.options.formId).length === 0) {
        this.log('Can\'t find form with id: ' + options.formId, 'error');
        return;
      }
      this._currentElement = $(element);
      this.pages = new PagesManager(this);
      return;
    }

    AddressDetectionWidget.prototype.init = function() {
      this.addressData = {
        streetNumber: '',
        streetName: '',
        city: '',
        country: '',
        postalCode: ''
      };
      this.pages.start();
    };

    AddressDetectionWidget.prototype.detect = function() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(this._getAddress);
      } else {
        this.pages.error(this.options.texts.error.title, this.options.texts.error.unsupportedBrowser, false);
        this.log("Geolocation is not supported by this browser.", 'error');
      }
    };

    AddressDetectionWidget.prototype.fillForm = function() {
      var form;
      form = $(this.options.formId);
      form.find(this.options.addressId).val(this.addressData.streetName + ' ' + this.addressData.streetNumber);
      form.find(this.options.cityId).val(this.addressData.city);
      form.find(this.options.postalId).val(this.addressData.postalCode);
      form.find(this.options.postalFirstId).val(this.addressData.postalCode.split('-')[0]);
      form.find(this.options.postalSecondId).val(this.addressData.postalCode.split('-')[1]);
      form.find(this.options.countryId).val(this.addressData.country);
    };

    AddressDetectionWidget.prototype._getAddress = function(position) {
      var geocoder, lat, latlng, lng;
      lat = position.coords.latitude;
      lng = position.coords.longitude;
      this.pages.loading();
      geocoder = new google.maps.Geocoder();
      latlng = new google.maps.LatLng(lat, lng);
      geocoder.geocode({
        'latLng': latlng
      }, (function(_this) {
        return function(results, status) {
          if (status === google.maps.GeocoderStatus.OK) {
            if (results[0] && results[1]) {
              _this.log(results[0].formatted_address);
              _this._parseResult(results[0]);
              _this._parseResult(results[1]);
              _this.pages.success();
            } else {
              _this.pages.error(_this.options.texts.error.title, _this.options.texts.error.geocoderFailed);
              _this.log("Geocoder failed due to: " + status, 'error');
            }
          }
        };
      })(this));
    };

    AddressDetectionWidget.prototype._parseResult = function(addressObject) {
      var addrComp, name, type, _i, _len, _ref;
      _ref = addressObject.address_components;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        addrComp = _ref[_i];
        type = addrComp.types[0];
        name = addrComp.long_name;
        switch (type) {
          case "street_number":
            this.addressData.streetNumber = name;
            break;
          case "route":
            this.addressData.streetName = name;
            break;
          case "locality":
            this.addressData.city = name;
            break;
          case "country":
            this.addressData.country = name;
            break;
          case "postal_code":
            this.addressData.postalCode = name;
        }
      }
    };

    return AddressDetectionWidget;

  })(Plugin);

  (function($, window, document, undefined_) {
    var pluginName;
    pluginName = "AddressDetectionWidget";
    $.fn[pluginName] = function(options, languages) {
      var count, instanceCount;
      count = 0;
      instanceCount = this.length;
      this.each(function() {
        var instanceName, newInstance;
        count = count + 1;
        if (instanceCount === 1) {
          count = '#' + $(this).attr('id');
        }
        instanceName = pluginName + '_' + count;
        newInstance = new AddressDetectionWidget(this, options, instanceName, pluginName, languages);
        if (!$.data(this, instanceName)) {
          $.data(this, instanceName, newInstance);
          return newInstance.init();
        }
      });
    };
  })(jQuery, window, document);

}).call(this);
